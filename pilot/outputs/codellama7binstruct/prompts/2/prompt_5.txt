You are an expert in refactoring code snippets. Here are some examples of refactoring using the Extract Method technique.

================= EXAMPLES =================

Example 1:

Refactoring Description: Extract Method public bpartnerIdIfNotNull(bpartnerId BPartnerId) : FactLineBuilder extracted from public setC_BPartner_ID_IfValid(bpartnerId int) : FactLineBuilder in class org.compiere.acct.Fact.FactLineBuilder

Code Before:
------------
@@ -31,21 +31,25 @@
 import org.compiere.model.I_C_ElementValue;
 import org.compiere.model.MAccount;
 import org.compiere.model.MFactAcct;
 import org.slf4j.Logger;
 
 import de.metas.acct.api.AcctSchema;
 import de.metas.acct.api.AcctSchemaElement;
 import de.metas.acct.api.AcctSchemaElementType;
 import de.metas.acct.api.AcctSchemaElementsMap;
 import de.metas.acct.api.AcctSchemaGeneralLedger;
 import de.metas.acct.api.AcctSchemaId;
 import de.metas.bpartner.BPartnerId;
 import de.metas.currency.ICurrencyConversionContext;
 import de.metas.logging.LogManager;
 import de.metas.money.CurrencyId;
 import de.metas.product.acct.api.ActivityId;
 import de.metas.quantity.Quantity;
 import de.metas.util.Check;
 import lombok.NonNull;
 import lombok.ToString;
 
@@ -1109,7 +1113,13 @@ private final void markAsBuilt()
 			built = true;
 		}
 
-		public FactLineBuilder setAccount(MAccount account)
 		{
 			assertNotBuild();
 			this.account = account;
@@ -1318,9 +1328,9 @@ private OrgId getOrgId()
 		}
 
 		@Deprecated
-		public FactLineBuilder setC_BPartner_ID(Integer bpartnerIdInt)
 		{
-			final BPartnerId bpartnerId = bpartnerIdInt != null ? BPartnerId.ofRepoIdOrNull(bpartnerIdInt) : null;
 			return bpartnerId(bpartnerId);
 		}
 
@@ -1331,15 +1341,21 @@ public FactLineBuilder bpartnerId(final BPartnerId bpartnerId)
 			return this;
 		}
 
-		public FactLineBuilder setC_BPartner_ID_IfValid(final int bpartnerId)
 		{
-			assertNotBuild();
-			if (bpartnerId > 0)
 			{
-				setC_BPartner_ID(bpartnerId);
 			}
-			return this;
 
 		}
 
 		private BPartnerId getBpartnerId()

Code After:
------------
@@ -31,21 +31,25 @@
 import org.compiere.model.I_C_ElementValue;
 import org.compiere.model.MAccount;
 import org.compiere.model.MFactAcct;
+import org.compiere.util.Env;
 import org.slf4j.Logger;
 
+import de.metas.acct.api.AccountId;
 import de.metas.acct.api.AcctSchema;
 import de.metas.acct.api.AcctSchemaElement;
 import de.metas.acct.api.AcctSchemaElementType;
 import de.metas.acct.api.AcctSchemaElementsMap;
 import de.metas.acct.api.AcctSchemaGeneralLedger;
 import de.metas.acct.api.AcctSchemaId;
+import de.metas.acct.api.IAccountDAO;
 import de.metas.bpartner.BPartnerId;
 import de.metas.currency.ICurrencyConversionContext;
 import de.metas.logging.LogManager;
 import de.metas.money.CurrencyId;
 import de.metas.product.acct.api.ActivityId;
 import de.metas.quantity.Quantity;
 import de.metas.util.Check;
+import de.metas.util.Services;
 import lombok.NonNull;
 import lombok.ToString;
 
@@ -1109,7 +1113,13 @@ private final void markAsBuilt()
 			built = true;
 		}
 
+		public FactLineBuilder setAccount(@NonNull final AccountId accountId)
+		{
+			final IAccountDAO accountsRepo = Services.get(IAccountDAO.class);
+			return setAccount(accountsRepo.getById(Env.getCtx(), accountId));
+		}
+
+		public FactLineBuilder setAccount(final MAccount account)
 		{
 			assertNotBuild();
 			this.account = account;
@@ -1318,9 +1328,9 @@ private OrgId getOrgId()
 		}
 
 		@Deprecated
+		public FactLineBuilder setC_BPartner_ID(Integer bpartnerRepoId)
 		{
+			final BPartnerId bpartnerId = bpartnerRepoId != null ? BPartnerId.ofRepoIdOrNull(bpartnerRepoId) : null;
 			return bpartnerId(bpartnerId);
 		}
 
@@ -1331,15 +1341,21 @@ public FactLineBuilder bpartnerId(final BPartnerId bpartnerId)
 			return this;
 		}
 
+		public FactLineBuilder bpartnerIdIfNotNull(final BPartnerId bpartnerId)
 		{
+			if (bpartnerId != null)
 			{
+				return bpartnerId(bpartnerId);
 			}
+			else
+			{
+				return this;
+			}
+		}
 
+		public FactLineBuilder setC_BPartner_ID_IfValid(final int bpartnerRepoId)
+		{
+			return bpartnerIdIfNotNull(BPartnerId.ofRepoIdOrNull(bpartnerRepoId));
 		}
 
 		private BPartnerId getBpartnerId()

Example 2:

Refactoring Description: Extract Method protected singleRun(args String[]) : int extracted from private runSingleJar(args String[]) : int in class com.google.devtools.build.singlejar.SingleJarWorker

Code Before:
------------
@@ -34,7 +34,7 @@ public static void main(String[] args) {
   private PrintStream originalSterr;
   private ByteArrayOutputStream stdoutAndStderr;
 
-  private void runWorker() {
     trapOutputs();
 
     try {
@@ -81,7 +81,7 @@ private void outputResult(int returnCode) throws IOException {
 
   private int runSingleJar(String[] args) {
     try {
-      return SingleJar.singleRun(args);
     } catch (IOException e) {
       // Some IO failures are okay no need to quit the worker
       System.err.println("SingleJar threw exception : " + e.getMessage());
@@ -94,4 +94,8 @@ private int runSingleJar(String[] args) {
       return 1;
     }
   }
 }

Code After:
------------
@@ -34,7 +34,7 @@ public static void main(String[] args) {
   private PrintStream originalSterr;
   private ByteArrayOutputStream stdoutAndStderr;
 
+  protected void runWorker() {
     trapOutputs();
 
     try {
@@ -81,7 +81,7 @@ private void outputResult(int returnCode) throws IOException {
 
   private int runSingleJar(String[] args) {
     try {
+      return singleRun(args);
     } catch (IOException e) {
       // Some IO failures are okay no need to quit the worker
       System.err.println("SingleJar threw exception : " + e.getMessage());
@@ -94,4 +94,8 @@ private int runSingleJar(String[] args) {
       return 1;
     }
   }
+
+  protected int singleRun(String[] args) throws Exception {
+    return SingleJar.singleRun(args);
+  }
 }

Example 3:

Refactoring Description: Extract Method public createPointer(ptr long) : LLVMTruffleObject extracted from public createNullPointer() : LLVMTruffleObject in class com.oracle.truffle.llvm.runtime.LLVMTruffleObject

Code Before:
------------
@@ -65,7 +65,11 @@ private static LLVMSourceType overrideBaseType(LLVMTruffleObject obj, Type newTy
     }
 
     public static LLVMTruffleObject createNullPointer() {
-        return new LLVMTruffleObject(null, 0, null, null);
     }
 
     public LLVMTruffleObject(LLVMTruffleObject orig, Type type) {

Code After:
------------
@@ -65,7 +65,11 @@ private static LLVMSourceType overrideBaseType(LLVMTruffleObject obj, Type newTy
     }
 
     public static LLVMTruffleObject createNullPointer() {
+        return createPointer(0L);
+    }
+
+    public static LLVMTruffleObject createPointer(long ptr) {
+        return new LLVMTruffleObject(null, ptr, null, null);
     }
 
     public LLVMTruffleObject(LLVMTruffleObject orig, Type type) {

================= REFACTORING MECHANICS =================

Please provide a refactored version of the code snippets above using the Extract Method technique, following these mechanics: 

1. Find a piece of code that does one clear task.
2. Note what variables it uses or changes.
3. Create a new method with a clear name.
4. Move the piece there, adding needed parameters and returns.
5. Replace the old chunk with a call to the new method.
6. Compile and Test to confirm it works the same.

================= CODE TO REFACTOR =================

/**
 * Encode the given symbol info to a bit matrix.
 *
 * @param placement  The DataMatrix placement.
 * @param symbolInfo The symbol info to encode.
 * @return The bit matrix generated.
 */
private static BitMatrix encodeLowLevel(DefaultPlacement placement, SymbolInfo symbolInfo, int width, int height) {
    int symbolWidth = symbolInfo.getSymbolDataWidth();
    int symbolHeight = symbolInfo.getSymbolDataHeight();
    ByteMatrix matrix = new ByteMatrix(symbolInfo.getSymbolWidth(), symbolInfo.getSymbolHeight());
    int matrixY = 0;
    for (int y = 0; y < symbolHeight; y++) {
        // Fill the top edge with alternate 0 / 1
        int matrixX;
        if ((y % symbolInfo.matrixHeight) == 0) {
            matrixX = 0;
            for (int x = 0; x < symbolInfo.getSymbolWidth(); x++) {
                matrix.set(matrixX, matrixY, (x % 2) == 0);
                matrixX++;
            }
            matrixY++;
        }
        matrixX = 0;
        for (int x = 0; x < symbolWidth; x++) {
            // Fill the right edge with full 1
            if ((x % symbolInfo.matrixWidth) == 0) {
                matrix.set(matrixX, matrixY, true);
                matrixX++;
            }
            matrix.set(matrixX, matrixY, placement.getBit(x, y));
            matrixX++;
            // Fill the right edge with alternate 0 / 1
            if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {
                matrix.set(matrixX, matrixY, (y % 2) == 0);
                matrixX++;
            }
        }
        matrixY++;
        // Fill the bottom edge with full 1
        if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {
            matrixX = 0;
            for (int x = 0; x < symbolInfo.getSymbolWidth(); x++) {
                matrix.set(matrixX, matrixY, true);
                matrixX++;
            }
            matrixY++;
        }
    }
    return convertByteMatrixToBitMatrix(matrix, width, height);
}

================= OUTPUT FORMAT =================


Return the result strictly using the format below:
<refactored code>
[The code after the refactoring should be between these tags.]
</refactored code>
<refactoring explanation>
[The explanation of the refactoring should be between these tags.]
</refactoring explanation>