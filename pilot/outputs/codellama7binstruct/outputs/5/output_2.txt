  <refactored code>

/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */
int nextIndexOf(CharSequence seq) {
    return nextIndexOf(seq, 0);
}

private int nextIndexOf(CharSequence seq, int start) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos + start; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}

</refactored code>
<refactoring explanation>

The original method was refactored into two methods: `nextIndexOf` and `nextIndexOf(CharSequence, int)`. The first method is the original method, which takes a `CharSequence` as a parameter and returns the offset between the current position and the next instance of the input sequence. The second method is a private method that takes a `CharSequence` and an integer as parameters and returns the offset between the current position and the next instance of the input sequence, starting from the given integer.

The refactoring was done to make the code more modular and easier to understand. The original method was too long and complex, and it was difficult to understand what it was doing. By breaking it down into two methods, the code is now easier to read and understand. The `nextIndexOf` method is now a simple wrapper around the `nextIndexOf(CharSequence, int)` method, which makes it easier to use and understand.

</refactoring explanation>