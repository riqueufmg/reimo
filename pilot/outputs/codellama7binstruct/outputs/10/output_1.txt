  <refactored code>
private Object processSingle(Page page, String html, boolean isRaw) {
    Object o = null;
    try {
        o = clazz.newInstance();
        for (FieldExtractor fieldExtractor : fieldExtractors) {
            if (fieldExtractor.isMulti()) {
                List<String> value = extractValue(page, fieldExtractor, html, isRaw);
                if ((value == null || value.size() == 0) && fieldExtractor.isNotNull()) {
                    return null;
                }
                if (fieldExtractor.getObjectFormatter() != null) {
                    List<Object> converted = convert(value, fieldExtractor.getObjectFormatter());
                    setField(o, fieldExtractor, converted);
                } else {
                    setField(o, fieldExtractor, value);
                }
            } else {
                String value = extractValue(page, fieldExtractor, html, isRaw);
                if (value == null && fieldExtractor.isNotNull()) {
                    return null;
                }
                if (fieldExtractor.getObjectFormatter() != null) {
                    Object converted = convert(value, fieldExtractor.getObjectFormatter());
                    if (converted == null && fieldExtractor.isNotNull()) {
                        return null;
                    }
                    setField(o, fieldExtractor, converted);
                } else {
                    setField(o, fieldExtractor, value);
                }
            }
        }
        if (AfterExtractor.class.isAssignableFrom(clazz)) {
            ((AfterExtractor) o).afterProcess(page);
        }
    } catch (InstantiationException e) {
        logger.error("extract fail", e);
    } catch (IllegalAccessException e) {
        logger.error("extract fail", e);
    } catch (InvocationTargetException e) {
        logger.error("extract fail", e);
    }
    return o;
}

private List<String> extractValue(Page page, FieldExtractor fieldExtractor, String html, boolean isRaw) {
    List<String> value;
    switch(fieldExtractor.getSource()) {
        case RawHtml:
            value = page.getHtml().selectDocumentForList(fieldExtractor.getSelector());
            break;
        case Html:
            if (isRaw) {
                value = page.getHtml().selectDocumentForList(fieldExtractor.getSelector());
            } else {
                value = fieldExtractor.getSelector().selectList(html);
            }
            break;
        case Url:
            value = fieldExtractor.getSelector().selectList(page.getUrl().toString());
            break;
        case RawText:
            value = fieldExtractor.getSelector().selectList(page.getRawText());
            break;
        default:
            value = fieldExtractor.getSelector().selectList(html);
    }
    return value;
}

private Object convert(String value, ObjectFormatter objectFormatter) {
    Object converted = null;
    try {
        converted = objectFormatter.format(value);
    } catch (Exception e) {
        logger.error("convert fail", e);
    }
    return converted;
}

private void setField(Object o, FieldExtractor fieldExtractor, Object value) {
    try {
        fieldExtractor.getField().set(o, value);
    } catch (IllegalAccessException e) {
        logger.error("set field fail", e);
    }
}
</refactored code>
<refactoring explanation>
The code was refactored by extracting the common logic of extracting values from the HTML into a separate method called "extractValue". This method takes the page, field extractor, HTML, and a flag indicating whether the HTML is raw or not as input, and returns the extracted value.

The original code had a lot of duplicate code, which was extracted into the "extractValue" method. The original code also had a lot of null checks, which were removed from the refactored code.

The refactored code also added a new method called "convert" to convert the extracted value into the desired format. This method takes the extracted value and an object formatter as input, and returns the converted value.

Finally, the refactored code added a new method called "setField" to set the extracted value to the corresponding field in the object. This method takes the object, field extractor, and extracted value as input, and sets the field value.

Overall, the refactored code is more concise and easier to read, and it also reduces the amount of duplicate code and null checks.
</refactoring explanation>